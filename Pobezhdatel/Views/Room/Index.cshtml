<div class="container">
    <div class="game-chat-panel">
        <div class="game-info">
            <p>
                <b>Бросок кубов: </b>//XdY, где X - количество кубов,
                Y - количество граней кубов<br />
                Аналог на русском: //XкY<br />
                Если куб один, то Х можно не писать: //d6
            </p>
            <p>
                В одном броске может быть 1-9 кубов с 1-100 гранями (от 1d1 до 9d100).<br />
                В любом месте текста сообщения может быть сколько угодно бросков.<br />
                <b>Примеры: </b>//2d6 //3d24 //1d100
            </p>
        </div>
        <div class="game-chat">
            Пока что нет сообщений...
        </div>
    </div>

    <div class="main-chat-input">
        <textarea id="message-input" class="form-control" rows="7" maxlength="1000"></textarea>
        <div class="input-buttons">
            <button id="add-msg-btn" type="button" class="btn btn-default btn-lg">
                Отправить
                <span class="glyphicon glyphicon-send" aria-hidden="true"></span>
            </button>
            <div class="radio">
                <label>
                    <input type="radio" name="sending-method" id="direct" value="direct" checked>
                    Enter - отправка, Shift + Enter - перенос.
                </label>
            </div>
            <div class="radio">
                <label>
                    <input type="radio" name="sending-method" id="reversed" value="reversed">
                    Shift + Enter - отправка, Enter - перенос.
                </label>
            </div>
        </div>
    </div>
</div>

<script>
    // At first ask current player's name, encode it and save
    var curreentPlayerName = "@ViewBag.PlayerName";
    var chat = $.connection.chatHub;    // Reference the auto-generated proxy for the hub
    var directSendingMethod = true;     // Direct (not reversed) sending method (Enter - send, Shift + Enter - new line) is default

    // If there is no name or it is empty, then set Anonymous name
    if (isEmptyOrSpaces(curreentPlayerName)) {
        curreentPlayerName = "Анонимус";
    }

    // Then load previous messages
    $.ajax({
        url: "@Url.Action("GetMessages")",
        type: "POST",
        async: true,
        success: function (messagesString) {
            if (messagesString !== "[]")
                clearDefaultString();

            // Parse messages and add them to container
            $.each(JSON.parse(messagesString), function () {
                addMessageToChat(this.PlayerName, this.Text, this.DicesRollResult);
            });

            goToLastMessage();
        }
    });

    $("#message-input").focus();    // Then focus on the message input

    // Start the connection
    $.connection.hub.start().done(function () {

        $("#add-msg-btn").click(function() {                // Handle a click on the button for message addition
            sendMessageToServer($("#message-input").val());
        });

        // Handle key pressed event to catch Shift+Enter keys pressing
        $(document).keypress(function (event) {
            // if this is the Enter key - 13 (10 in Chrome) and if sending method isn't direct and Shift is pressed
            if ((event.keyCode === 10 || event.keyCode === 13) && (isDirectSendingMethod() || isReversedSendingPethod())) {
                sendMessageToServer($("#message-input").val());
                return false;
            }
        });
    });

    /**
     * Check is current sending method direct (Enter - send, Shift + Enter - new line)
     */
    function isDirectSendingMethod() {
        return directSendingMethod && !event.shiftKey;
    }

    /**
     * Check is current sending method direct (Shift + Enter - send, Enter - new line)
     */
    function isReversedSendingPethod() {
        return !directSendingMethod && event.shiftKey;
    }

    /**
     * Send a new message from a user to server.
     * param messageText String with message.
     */
    function sendMessageToServer(messageText) {
        if (isEmptyOrSpaces(messageText)) return;               // Disable empty message addition

        goToLastMessage();

        // Call the Send method on the hub, first parameter is current room name
        chat.server.send("@ViewBag.RoomName", curreentPlayerName, messageText);
    }

    /**
     * Function that the hub calls to display messages.
     */
    chat.client.addMessageToChat = function (playerName, message, dicesRollResult) {
        clearMessageInput();
        clearDefaultString();
        addMessageToChat(playerName, message, dicesRollResult);
    };

    // Handle messages sending method changing
    $("input[type=radio][name=sending-method]").change(function () {
        if (this.value === "direct") {
            directSendingMethod = true;
        }
        else if (this.value === "reversed") {
            directSendingMethod = false;
        }
    });

    /**
     * Scroll game chat only for the current user to the bottom
     * Use scrollHeight to calculate real height of the div with scroll
     * http://stackoverflow.com/a/1891142
     * http://stackoverflow.com/a/2522592/1367313
     */
    function goToLastMessage() {
        $(".game-chat").animate({ scrollTop: $(".game-chat")[0].scrollHeight }, "slow");
    }

    /**
     * Append a new message block to chat container.
     * param playerName Name of the player that sends message.
     * param messageText String with player's message.
     * param dicesRollResult Text with result of dices roll.
     */
    function addMessageToChat(playerName, message, dicesRollResult) {
        $(".game-chat").append(getMessageBlock(playerName, message, dicesRollResult));
    }

    /**
     * Get string with HTML code of the message block that is inserted to game chat from specified player.
     * param playerName Name of the player that sends message.
     * param messageText String with player's message.
     * param dicesRollText Text with result of dices roll.
     * return String with HTML code of the message block.
     */
    function getMessageBlock(playerName, messageText, dicesRollResultText) {
        return "<div class='message-container'>" +
                    "<div class='player-name'>" + playerName + "</div>" +
                    "<div class='message'>" +
                        "<div class='message-body'>" + htmlEncode(messageText) + "</div>" +
                        (!isEmptyOrSpaces(dicesRollResultText) ? "<div class='message-dices'>" + dicesRollResultText + "</div>" : "") +
                    "</div>" +
                "</div>";
    }

    /**
     * Check is a string empty or contains spaces or newline characters only.
     */
    function isEmptyOrSpaces(str) {
        return str === null || str === undefined || str.match(/^( |\n)*$/) !== null;
    }

    /**
     * HTML-encode message to display it as is
     */
    function htmlEncode(value) {
        return $('<div />').text(value).html();
    }

    /**
     * Clear default string that tells that there is no messages.
     */
    function clearDefaultString() {
        // If there is only one child and this is a text that there are no messages, remove it.
        if ($(".game-chat")[0].childNodes[0].nodeName === "#text") {
            $(".game-chat").empty();
        }
    }

    /*
     * Сlear message input and focus on it again
     */
    function clearMessageInput() {
        $("#message-input").val("").focus();
    }
</script>
